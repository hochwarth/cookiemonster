<?php

namespace ProcessWire;

class CookieMonster extends WireData implements Module, ConfigurableModule {

	public static function getModuleInfo() {
		return [
			'title' => 'CookieMonster', 
			'version' => 220,
			'summary' => 'Fulfills GDPR madness and renders a cookie banner above your siteâ€™s content.',
			'href' => 'https://github.com/johannesdachsel/cookiemonster',
			'singular' => true, 
			'autoload' => true, 
			'icon' => 'github-alt',
			'author' => 'Johannes Dachsel',
			'installs' => ['TextformatterCookieTable']
		];
	}


	/*
	* Module initialization
	* 	
	*/	
	public function init() {
		if (!$this->is_active) return;
		
		if(!isset($_COOKIE['cmnstr'])){
			$this->addHookAfter('Page::render', $this, 'addCookieBanner');	
		} else {
			$cookieValues = json_decode($_COOKIE['cmnstr']);
			if ($cookieValues->statistics && $this->ga_property_id) $this->addHookAfter('Page::render', $this, 'addTrackingCode');

            if ($cookieValues->external) {
                $lang = $this->getLang();

                $externalServices = $this->convertToArray($this->{"cookies_external$lang"});
                $stylesheets = [];
                $javascripts = [];

                foreach ($externalServices as $key => $externalService) {
                    $type = array_pop($externalService);
                    $url = array_pop($externalService);
                    $externalServices[$key] = $externalService;

                    switch (strtolower($type)) {
                        case 'script':
                            $javascripts[] = $url;
                            break;
                        case 'stylesheet':
                            $stylesheets[] = $url;
                            break;
                    }
                }

                $this->renderStylesheets($stylesheets);
                $this->renderJavascripts($javascripts);
            }
		}

        // var_dump($this->forms instanceof FormBuilder);
	}
		
	
	
	/*
	* addCookieBanner
	*
	* Adds cookie banner, scripts and styles 	
	*/
	public function addCookieBanner($event) {
		$page = $event->object; 
		if(in_array($page->template, ["admin","form-builder"])) return;

        $lang = $this->getLang();

        $externalServices = $this->convertToArray($this->{"cookies_external$lang"});

        foreach ($externalServices as $key => $externalService) {
            $type = array_pop($externalService);
            $url = array_pop($externalService);
            $externalServices[$key] = $externalService;
        }
			
		$bodyText = $this->{"bodytext$lang"};
		
		if($this->autolink == 1 && $this->{"target_string$lang"} != '' && $this->target_page){
			$bodyText = str_replace($this->{"target_string$lang"}, '<a href="'.$this->wire('pages')->get($this->target_page)->url.'">'.$this->{"target_string$lang"}.'</a>', $bodyText);
		}
		
		$cookieBanner = '<div class="cmnstr">';
		$cookieBanner .= '<div class="cmnstr-inner">';
		$cookieBanner .= '<p class="cmnstr-title">'.$this->{"titletext$lang"}.'</p>';
		$cookieBanner .= '<div class="cmnstr-body">'.$bodyText.'</div>';
		$cookieBanner .= '
						<ul class="cmnstr-options">
							<li>
								<input type="checkbox" name="necessary" id="cmnstr_necessary" value="1" checked="checked" disabled>
								<label for="cmnstr_necessary">'.__("Notwendig").'</label>
							</li>';
		if ($this->{"cookies_statistics$lang"}) {
			$cookieBanner .= '<li>
								<input type="checkbox" name="statistics" id="cmnstr_statistics" value="1">
								<label for="cmnstr_statistics">'.__("Statistiken").'</label>
							</li>';
		}

        if (count($externalServices) > 0) {
            $cookieBanner .= '<li>
								<input type="checkbox" name="external" id="cmnstr_external" value="1">
								<label for="cmnstr_external">'.__("Externe Dienste").'</label>
							</li>';
        }
		
		$cookieBanner .= '	<li><button class="cmnstr-button" type="button" onclick="setCookieMonster();">'.$this->{"buttontext_confirm$lang"}.'</button>';
		if ($this->{"cookies_statistics$lang"} || count($externalServices) > 0) {
			$cookieBanner .= '<button class="cmnstr-button highlight" type="button" onclick="setCookieMonster(true);">'.$this->{"buttontext_accept$lang"}.'</button>';
		}
								
		$cookieBanner .= '</li></ul>';
		
		$necCount = count(explode("\n", $this->{"cookies_necessary$lang"}));
		
		$cookieBanner .= '<details class="cmnstr-details">
							<summary>Details</summary>
							<div class="cmnstr-tabs">	
								<ul class="cmnstr-tabs-nav">
									<li><a href="#cmnstr-details-necessary" class="is-active">'.__("Notwendig").' ('.$necCount.')</a></li>';
		if ($this->{"cookies_statistics$lang"}) {
			$statCount = count(explode("\n", $this->{"cookies_statistics$lang"}));
			$cookieBanner .= '<li><a href="#cmnstr-details-statistics">'.__("Statistiken").' ('.$statCount.')</a></li>';
		}

        if (count($externalServices) > 0) {
            $cookieBanner .= '<li><a href="#cmnstr-details-external">'.__("Externe Dienste").' (' . count($externalServices) . ')</a></li>';
        }
			
			$cookieBanner .= '</ul>
								<div class="cmnstr-tabs-container">
									<div id="cmnstr-details-necessary" class="is-active">
										<p>'.$this->{"introtext_necessary$lang"}.'</p>';
			$cookieBanner .= $this->renderCookieTable($this->{"cookies_necessary$lang"});			
			$cookieBanner .= '</div>';
									
			if ($this->{"cookies_statistics$lang"}) {
				$cookieBanner .= '<div id="cmnstr-details-statistics">
									<p>'.$this->{"introtext_statistics$lang"}.'</p>';
				$cookieBanner .= $this->renderCookieTable($this->{"cookies_statistics$lang"});						
				$cookieBanner .= '</div>';
			}

            if (count($externalServices) > 0) {
                $cookieBanner .= '<div id="cmnstr-details-external">
									<p>'.$this->{"introtext_external$lang"}.'</p>';
                $cookieBanner .= $this->renderCookieTableArray($externalServices);
                $cookieBanner .= '</div>';
            }
									
			$cookieBanner .= '</div>
							</div>
						</details>';
			
			if ($this->imprint_page) {
				$imprintPage = $this->pages->get($this->imprint_page);
				$cookieBanner .= '<a href="'.$imprintPage->url.'">'.$imprintPage->title.'</a>';
			}
						
		$cookieBanner .= '</div>';
		$cookieBanner .= '</div>';
		
		$output = $event->return;
		$folder = $this->wire('config')->urls->$this;
		
		// inject stylesheet
		if($this->use_stylesheet){
			$output = str_replace("</head>", "<link rel='stylesheet' type='text/css' href='{$folder}{$this}.css'></head>", $output);
		}
		
		// inject script file
		$output = str_replace("</head>", "<script src='{$folder}{$this}.js'></script></head>", $output);
		
		// inject polyfill for IE11 and below
		if (preg_match('~MSIE|Internet Explorer~i', $_SERVER['HTTP_USER_AGENT']) || (strpos($_SERVER['HTTP_USER_AGENT'], 'Trident/7.0; rv:11.0') !== false)) {
			$output = str_replace("</head>", "<script src='{$folder}details-polyfill.js'></script></head>", $output);
		}
		
		// append cookie banner
		$regex = '/(<body[^>]*>)/m';
		$replace = '$1'.$cookieBanner;
		$event->return = preg_replace($regex, $replace, $output);	
	}
	
	
	/*
	* addTrackingCode
	*
	* Appends Google Analytics Tracking Code to the <body>-element
	*/
	public function addTrackingCode($event) {
		$page = $event->object;
		
		if($page->template == 'admin') return;
		
		$event->return = str_replace("</body>", $this->renderGATracking($page)."</body>", $event->return);
	}

    public function convertToArray(?string $toConvert): array
    {
        if ($toConvert === '' || $toConvert === null) {
            return [];
        }

        return array_map(function ($fields) {
            return explode('|', $fields);
        }, explode('\n', $toConvert));
    }

	/*
	* renderCookieTable
	*
	* Helper function to render a table view for a given cookie config field
	*/
	public function renderCookieTable($cookiefield) {
		if (!$cookiefield || empty($cookiefield)) return;
		$rows = explode("\n", $cookiefield);
		$out = '<table class="cmnstr-table">
					<thead><tr>';
		$out .= '<th>'.__("Name").'</th>';
		$out .= '<th>'.__("Anbieter").'</th>';
		$out .= '<th>'.__("Zweck").'</th>';
		$out .= '<th>'.__("Ablauf").'</th>';
		$out .= '</tr></thead>
				<tbody>';
		
		foreach ($rows as $row) {
			$columns = explode("|", $row);
			
			$out .= '<tr>';
			foreach ($columns as $column) {
				$out .= '<td>'.$column.'</td>';
			}
			$out .= '</tr>';
		}
		$out .= '</tbody></table>';
		return $out;
	}

    public function renderCookieTableArray(array $cookies) {
        if (count($cookies) <= 0) {
            return;
        }

        $out = '<table class="cmnstr-table">
					<thead><tr>';
        $out .= '<th>'.__("Name").'</th>';
        $out .= '<th>'.__("Anbieter").'</th>';
        $out .= '<th>'.__("Zweck").'</th>';
        $out .= '</tr></thead>
				<tbody>';

        foreach ($cookies as $row) {

            $out .= '<tr>';
            foreach ($row as $column) {
                $out .= '<td>'.$column.'</td>';
            }
            $out .= '</tr>';
        }
        $out .= '</tbody></table>';
        return $out;
    }
	
	
	/*
	* renderCookieTable
	*
	* Helper function to render Google Analytics Javascript snippet
	*/
	public function renderGATracking($page) {
		$out = <<<TRACKING
        <!-- Global Site Tag (gtag.js) - Google Analytics -->
        <script async src="https://www.googletagmanager.com/gtag/js?id=$this->ga_property_id"></script>
        <script>
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', '$this->ga_property_id');
        </script>
TRACKING;
		
		return $out;
	}

    public function renderStylesheets(array $stylesheets): void
    {
        $this->addHookAfter('Page::render', function (HookEvent $event) use ($stylesheets) {
            /** @var Page $page */
            $page = $event->object;

            if ($page->template === 'admin') {
                return;
            }

            $output = '';
            foreach ($stylesheets as $stylesheet) {
                $output .= '<link rel="stylesheet" href="' . $stylesheet . '">';
            }

            $event->return = str_replace('</head>', $output . '</head>', $event->return);
        });
    }

    public function renderJavascripts(array $javascripts): void
    {
        $this->addHookAfter('Page::render', function (HookEvent $event) use ($javascripts) {
            /** @var Page $page */
            $page = $event->object;

            if ($page->template === 'admin') {
                return;
            }

            $output = '';
            foreach ($javascripts as $javascript) {
                $output .= '<script src="' . $javascript . '">';
            }

            $event->return = str_replace('</body>', $output . '</body>', $event->return);
        });
    }
	
	
	/*
	* getModuleConfigInputfields
	*
	* Module Configuration Panel
	*/
	public static function getModuleConfigInputfields(array $data) {
        require_once(__DIR__ . '/CookieMonsterConfig.php');
        $c = new CookieMonsterConfig($data);
        return $c->getConfig();
	}

    private function getLang(): string
    {
        if ($this->wire('languages')) {
            $userLanguage = $this->wire('user')->language;
            $lang = $userLanguage->isDefault() ? '' : "__$userLanguage->id";
        } else {
            $lang = '';
        }
        return $lang;
    }
}
