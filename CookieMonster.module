<?php

namespace ProcessWire;

class CookieMonster extends WireData implements Module, ConfigurableModule
{

    public static function getModuleInfo()
    {
        return [
            'title' => 'CookieMonster',
            'version' => 240,
            'summary' => 'Add a cookie banner, integrate tracking and send relevant headers.',
            'href' => 'https://github.com/johannesdachsel/cookiemonster',
            'singular' => true,
            'autoload' => true,
            'icon' => 'github-alt',
            'author' => 'Johannes Dachsel',
            'installs' => ['TextformatterCookieTable']
        ];
    }

    public $allowTracking = false;


    /*
    * Module initialization
    *
    */
    public function init()
    {
        if(!wire('user')->isSuperuser()) return;

        $this->addHookAfter("Page::render", $this, "sendHeaders");

        if (!$this->is_active) return;

        if (!isset($_COOKIE['cmnstr'])) {
            $this->addHookAfter('Page::render', $this, 'addCookieBanner');
            return;
        }

        $cookieValues = json_decode($_COOKIE['cmnstr']);

        if (property_exists($cookieValues, "statistics") && $cookieValues->statistics) {
            $this->allowTracking = true;
        }

        if (property_exists($cookieValues, "ads") && $cookieValues->ads) {
            $this->allowAds = true;
        }

        if ($this->allowTracking && $this->ga_property_id) {
            $this->addHookAfter('Page::render', $this, 'addTrackingCode');
        }

        if ($this->allowAds) {
            $this->addHookAfter('Page::render', $this, 'addGoogleAdsConversions');
        }
    }

    /*
    * addCookieBanner
    *
    * Adds cookie banner, scripts and styles
    */
    public function addCookieBanner($event)
    {
        $page = $event->object;
        if (in_array($page->template, ["admin", "form-builder"])) return;

        if ($this->wire('languages')) {
            $userLanguage = $this->wire('user')->language;
            $lang = $userLanguage->isDefault() ? '' : "__$userLanguage->id";
        } else {
            $lang = '';
        }

        $bodyText = $this->{"bodytext$lang"};

        if ($this->autolink == 1 && $this->{"target_string$lang"} != '' && $this->target_page) {
            $bodyText = str_replace($this->{"target_string$lang"}, '<a href="' . $this->wire('pages')->get($this->target_page)->url . '">' . $this->{"target_string$lang"} . '</a>', $bodyText);
        }

        $cookieBanner = '<div class="cmnstr">';
        $cookieBanner .= '<div class="cmnstr-inner">';
        $cookieBanner .= '<p class="cmnstr-title">' . $this->{"titletext$lang"} . '</p>';
        $cookieBanner .= '<div class="cmnstr-body">' . $bodyText . '</div>';
        $cookieBanner .= '
						<ul class="cmnstr-options">
							<li>
								<input type="checkbox" name="necessary" id="cmnstr_necessary" value="1" checked="checked" disabled>
								<label for="cmnstr_necessary">' . __("Notwendig") . '</label>
							</li>';
        if ($this->{"cookies_statistics$lang"}) {
            $cookieBanner .= '<li>
								<input type="checkbox" name="statistics" id="cmnstr_statistics" value="1">
								<label for="cmnstr_statistics">' . __("Statistiken") . '</label>
							</li>';
        }
        if ($this->{"introtext_ads$lang"}) {
            $cookieBanner .= "<li>
                                <input type='checkbox' name='ads' id='cmnstr_marketing' value='1' >
                                <label for='cmnstr_marketing'>" . __("Werbung") . "</label>
                            </li>";
        }

        $cookieBanner .= '	<li><button class="cmnstr-button" type="button" onclick="setCookieMonster();">' . $this->{"buttontext_confirm$lang"} . '</button>';
        if ($this->{"cookies_statistics$lang"}) {
            $cookieBanner .= '<button class="cmnstr-button highlight" type="button" onclick="setCookieMonster(true);">' . $this->{"buttontext_accept$lang"} . '</button>';
        }

        $cookieBanner .= '</li></ul>';

        $necCount = count(explode("\n", $this->{"cookies_necessary$lang"}));

        $cookieBanner .= '<details class="cmnstr-details">
							<summary>Details</summary>
							<div class="cmnstr-tabs">	
								<ul class="cmnstr-tabs-nav">
									<li><a href="#cmnstr-details-necessary" class="is-active">' . __("Notwendig") . ' (' . $necCount . ')</a></li>';
        if ($this->{"cookies_statistics$lang"}) {
            $statCount = count(explode("\n", $this->{"cookies_statistics$lang"}));
            $cookieBanner .= '<li><a href="#cmnstr-details-statistics">' . __("Statistiken") . ' (' . $statCount . ')</a></li>';
        }

        $cookieBanner .= '</ul>
								<div class="cmnstr-tabs-container">
									<div id="cmnstr-details-necessary" class="is-active">
										<p>' . $this->{"introtext_necessary$lang"} . '</p>';
        $cookieBanner .= $this->renderCookieTable($this->{"cookies_necessary$lang"});
        $cookieBanner .= '</div>';

        if ($this->{"cookies_statistics$lang"}) {
            $cookieBanner .= '<div id="cmnstr-details-statistics">
									<p>' . $this->{"introtext_statistics$lang"} . '</p>';
            $cookieBanner .= $this->renderCookieTable($this->{"cookies_statistics$lang"});
            $cookieBanner .= '</div>';
        }

        $cookieBanner .= '</div>
							</div>
						</details>';

        if ($this->imprint_page) {
            $imprintPage = $this->pages->get($this->imprint_page);
            $cookieBanner .= '<a href="' . $imprintPage->url . '">' . $imprintPage->title . '</a>';
        }

        $cookieBanner .= '</div>';
        $cookieBanner .= '</div>';

        $output = $event->return;
        $folder = $this->wire('config')->urls->$this;

        // inject stylesheet
        if ($this->use_stylesheet) {
            $output = str_replace("</head>", "<link rel='stylesheet' type='text/css' href='{$folder}{$this}.css'></head>", $output);
        }

        // inject script file
        $output = str_replace("</head>", "<script src='{$folder}{$this}.js'></script></head>", $output);

        // inject polyfill for IE11 and below
        if (preg_match('~MSIE|Internet Explorer~i', $_SERVER['HTTP_USER_AGENT']) || (strpos($_SERVER['HTTP_USER_AGENT'], 'Trident/7.0; rv:11.0') !== false)) {
            $output = str_replace("</head>", "<script src='{$folder}details-polyfill.js'></script></head>", $output);
        }

        // append cookie banner
        $regex = '/(<body[^>]*>)/m';
        $replace = '$1' . $cookieBanner;
        $event->return = preg_replace($regex, $replace, $output);
    }

    public function addGoogleAdsConversions(HookEvent $event) {
        static $injected = false;
        if ($injected) return;
        $injected = true;

        if (empty($convs)) return;
        $pageId  = (int) $this->wire('page')->id;
        $scripts = '';
        $fired   = [];

        foreach ($convs as $conv) {
            if (empty($conv['active']) || !in_array($pageId, $conv['pages'] ?? [])) continue;
            $id    = trim($conv['id']);
            $label = trim($conv['label']);
            if (!$id || !$label) continue;
            $key = "{$id}/{$label}";
            if (in_array($key, $fired)) continue;
            $fired[] = $key;
            $scripts .=
                "<script>
                    window.addEventListener('load', function() {
                      if (typeof gtag === 'function') {
                        gtag('event','conversion',{
                            send_to:'AW-{$id}/{$label}'
                        });
                      }
                    });
                </script>\n";
        }

        if ($scripts) {
            $event->return = preg_replace('/<\/body>/', $scripts . '</body>', $output, 1);
        }
    }

    /*
    * addTrackingCode
    *
    * Appends Google Analytics Tracking Code to the <body>-element
    */
    public function addTrackingCode($event)
    {
        $page = $event->object;

        if (in_array($page->template, ["admin", "form-builder"])) return;

        if (strpos($this->ga_property_id, 'GTM-') === 0) {
            $event->return = str_replace(
                '</head>',
                $this->renderGTM() . '</head>',
                $event->return
            );
        } else {
            $event->return = str_replace(
                '</head>',
                $this->renderGATracking() . '</head>',
                $event->return
            );
        }

    }

    /*
    * renderCookieTable
    *
    * Helper function to render Google Analytics Javascript snippet
    */
    public function renderGATracking()
    {
        $out = <<<TRACKING
    <!-- Global Site Tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id={$this->ga_property_id}"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag(){dataLayer.push(arguments);}
        
        gtag('consent', 'default', {
              'analytics_storage': 'denied',
              'ad_storage': 'denied',
              'ad_personalization': 'denied',
              'ad_user_data': 'denied',
              'functionality_storage': 'denied',
              'security_storage': 'granted'
            });
        
        gtag('consent', 'update', {
             'ad_storage': $this->allowAds ? 'granted' : 'denied',
             'analytics_storage': $this->allowTracking ? 'granted' : 'denied',
        })
        
        gtag('js', new Date());
        
        gtag('config', '{$this->ga_property_id}');
    </script>
TRACKING;

        return $out;
    }

    /*
    * renderCookieTable
    *
    * Helper function to render a table view for a given cookie config field
    */
    public function renderCookieTable($cookiefield)
    {
        if (!$cookiefield || empty($cookiefield)) return;
        $rows = explode("\n", $cookiefield);
        $out = '<table class="cmnstr-table">
					<thead><tr>';
        $out .= '<th>' . __("Name") . '</th>';
        $out .= '<th>' . __("Anbieter") . '</th>';
        $out .= '<th>' . __("Zweck") . '</th>';
        $out .= '<th>' . __("Ablauf") . '</th>';
        $out .= '</tr></thead>
				<tbody>';

        foreach ($rows as $row) {
            $columns = explode("|", $row);

            $out .= '<tr>';
            foreach ($columns as $column) {
                $out .= '<td>' . $column . '</td>';
            }
            $out .= '</tr>';
        }
        $out .= '</tbody></table>';
        return $out;
    }

    /**
     * Helper function to render the Google Tag Manager container snippet
     */
    public function renderGTM()
    {
        $id = $this->ga_property_id;
        if (!$id || strpos($id, 'GTM-') !== 0) return '';

        $out = <<<GTM
<!-- Google Tag Manager -->
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}

gtag('consent', 'default', {
  'analytics_storage': 'denied',
  'ad_storage': 'denied',
  'ad_personalization': 'denied',
  'ad_user_data': 'denied',
  'functionality_storage': 'denied',
  'security_storage': 'granted'
});
</script>

<script>
(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer', '$id');
</script>

<script>
(function () {
    function getCookie(name) {
        const value = '; ' + document.cookie;
        const parts = value.split('; ' + name + '=');
        if (parts.length === 2) return parts.pop().split(';').shift();
    }
    function getConsentCategories() {
        try {
            const raw = getCookie('cmnstr');
            return raw ? JSON.parse(raw) : {};
        } catch (e) {
            return {};
        }
    }
    const categoryMap = {
        'necessary': ['security_storage'],
        'statistics': ['analytics_storage','ad_storage','ad_personalization','ad_user_data','functionality_storage'],
    };
    const consented = getConsentCategories();
    if (Object.keys(consented).length > 0) {
        let updatedConsent = {
            ad_storage: 'denied',
            analytics_storage: 'denied',
            ad_user_data: 'denied',
            ad_personalization: 'denied',
            functionality_storage: 'denied',
            security_storage: 'granted'
        };
        for (const cat in consented) {
            if (consented[cat] && categoryMap[cat]) {
                categoryMap[cat].forEach(function(gtagKey) {
                    updatedConsent[gtagKey] = 'granted';
                });
            }
        }
        if (window.gtag) {
            gtag('consent', 'update', updatedConsent);
            window.dataLayer.push({event: 'consent_updated'});
        }
    }
})();
</script>

<!-- GTM Fallback -->
<noscript>
<iframe src="https://www.googletagmanager.com/ns.html?id=$id"
height="0" width="0" style="display:none;visibility:hidden"></iframe>
</noscript>
GTM;

        return $out;
    }

    public function sendHeaders(HookEvent $event)
    {
        header("Referrer-Policy: " . $this->referrer_policy_header);
        header("Strict-Transport-Security: max-age=" . $this->strict_transport_security_header);

        if ($this->x_content_type_options_header == 1) {
            header("X-Content-Type-Options: nosniff");
        }
    }

    /*
    * getModuleConfigInputfields
    *
    * Module Configuration Panel
    */
    public static function getModuleConfigInputfields(array $data)
    {
  	}
}
